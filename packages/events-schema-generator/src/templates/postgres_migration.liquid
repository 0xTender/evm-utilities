import { PrismaClient } from '@prisma/client';
import { providers } from 'ethers';
import {
  add_contracts,
  fetch_transactions_for_contract,
} from '@0xtender/evm-helpers/src';


const batchSize = 1000;

const prisma = new PrismaClient();

const events = [{% for event in events %}
    "e_{{-event.name}}_{{event.contract_name}}",{% endfor %}
]

const map = new Map<number, providers.JsonRpcProvider>();

const get_provider = (chainId: number | string) => {
  let provider = map.get(parseInt(chainId.toString()));
  if (provider) {
    return provider;
  }
  provider = new providers.JsonRpcProvider(process.env[`RPC_${chainId}_CHAIN`]);
  map.set(parseInt(chainId.toString()), provider);
  return provider;
};

const contracts_arr: {
  chainId: number;
  initBlock: number;
  name: string;
  address: string;
  transactionHash: string;
  abiPath: string;
}[] = [
    {% for contract in contracts %}
{{contract}},{% endfor %}
];

const migrate = async () => {
  const added_contracts = await add_contracts(prisma, contracts_arr);

  for (let index = 0; index < contracts_arr.length; index++) {
    const contract = contracts_arr[index];
    await fetch_transactions_for_contract(
      contract,
      events,
      get_provider(contract.chainId),
      prisma,
      batchSize
    );
  }

  return added_contracts;
};

migrate().catch(console.error);
